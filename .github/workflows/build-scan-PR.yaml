name: Build and Scan Docker Images on Push and Pull Request

on:
  pull_request:
    branches:
      - main  # Replace 'main' with your default branch if different
    paths:
      - 'managed-containers/**/Dockerfile'  # Only runs if a Dockerfile is created or updated in managed-containers

jobs:
  build-and-scan:
    runs-on: ubuntu-latest

    steps:
      # Step to check out the repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch the full commit history to ensure access to all commits

      # Step to set up Docker Buildx for advanced build features
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step to install Trivy, a vulnerability scanner for Docker images
      - name: Install Trivy
        run: |
          echo "Installing Trivy..."
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
          mkdir -p trivy-results  # Create a directory to store Trivy results

      # Step to find and build updated Dockerfiles
      - name: Find and build updated Dockerfiles
        id: build_and_scan
        run: |
          # Find all Dockerfiles that have been updated or created in the last commit
          dockerfiles=$(git diff --name-only HEAD^..HEAD | grep 'Dockerfile')

          # Exit if no Dockerfiles were found
          if [ -z "$dockerfiles" ]; then
            echo "No Dockerfiles created or updated."
            echo "::set-output name=scan_result::No Dockerfiles created or updated."
            exit 0
          fi

          scan_result=""
          # Loop through each Dockerfile found
          for dockerfile in $dockerfiles; do
            # Check if the Dockerfile exists
            if [ ! -f "$dockerfile" ]; then
              echo "Dockerfile $dockerfile does not exist, skipping..."
              continue
            fi

            # Get the directory of the Dockerfile
            dockerfile_dir=$(dirname $dockerfile)

            # Build the Docker image
            docker build -t test:latest $dockerfile_dir

            # Scan the local Docker image with Trivy for high and critical vulnerabilities
            trivy_output=$(trivy image --severity CRITICAL --exit-code 1 --no-progress --format table test:latest)
            echo "$trivy_output"
            scan_result="${scan_result}\n\n${dockerfile} scan result:\n${trivy_output}"
            
            # Clean up dangling images to free up space
            docker image prune -f
          done
          
          echo "::set-output name=scan_result::${scan_result}"

      # Step to post the scan result as a comment on the pull request
      - name: Post scan result as PR comment
        uses: actions/github-script@v6
        with:
          script: |
            const scanResult = `{{ steps.build_and_scan.outputs.scan_result }}`;
            const context = github.context;
            const issue_number = context.payload.pull_request.number;
            const octokit = github.getOctokit(process.env.GITHUB_TOKEN);
            await octokit.issues.createComment({
              ...context.repo,
              issue_number,
              body: `### Trivy Scan Results\n${scanResult}`
            });
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
